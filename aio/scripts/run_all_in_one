#!/bin/bash
# All-in-One run script
#
#  Copyright (c) 2013-2016 Cisco Systems, Inc. and others.  All rights reserved.
#
#  This program and the accompanying materials are made available under the
#  terms of the Eclipse Public License v1.0 which accompanies this distribution,
#  and is available at http://www.eclipse.org/legal/epl-v10.html
#
# Author: Tim Evens <tim@openbmp.org>
#

OPENBMP_BUFFER=${OPENBMP_BUFFER:=16}
MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:="OpenBMP"}
OPENBMP_DB_PASSWORD=${OPENBMP_DB_PASSWORD:="openbmp"}
OPENBMP_DB_USER=${OPENBMP_DB_USER:="openbmp"}
OPENBMP_DB_NAME=${OPENBMP_DB_NAME:="openBMP"}
GROUP_ID=${GROUP_ID:="openbmp-mysql-consumer"}
ADMIN_ID=${ADMIN_ID:="collector"}

source /etc/default/openbmpd

ulimit -c unlimited

#
# System info
#
INIT_SYS_TOTAL_MEM=$(grep MemTotal /proc/meminfo | awk '{print int($2 / 1000)}')
if [[ ${MEM:-""} = "" ]]; then
    SYS_TOTAL_MEM=$INIT_SYS_TOTAL_MEM
else
    SYS_TOTAL_MEM=$(($MEM * 1024))
fi

if [[ ${SYS_TOTAL_MEM} -gt ${INIT_SYS_TOTAL_MEM} ]]; then
    echo "ERROR: System memory of $INIT_SYS_TOTAL_MEM MB is less than requested memory ($SYS_TOTAL_MEM) MB"
    echo "   Set the -e MEM=value in GB to less than or equal to system memory or do not set at all."
    exit 1

elif [[ ${SYS_TOTAL_MEM} -lt 4000 ]]; then
    echo "ERROR: At least 4GB of RAM is required.  Found ${SYS_TOTAL_MEM} MB. Cannot proceed."
    exit 1
fi

SYS_NUM_CPU=$(grep processor /proc/cpuinfo | wc -l)

# Update the MySQL configuration
rm -f /etc/mysql/my.cnf
cp /etc/mysql/my.cnf.tmpl /etc/mysql/my.cnf

sed -r -i "s/MEM_20_PERCENT\$/$((${SYS_TOTAL_MEM} * 20 / 100))M/g" /etc/mysql/my.cnf
sed -r -i "s/MEM_75_PERCENT\$/$((${SYS_TOTAL_MEM} * 70 / 100))M/g" /etc/mysql/my.cnf
sed -r -i "s/MEM_75_PERCENT_BY_ONE\$/$((${SYS_TOTAL_MEM} * 70 / 100 / 1000))/g" /etc/mysql/my.cnf
sed -r -i "s/IO_THREADS\$/$((${SYS_NUM_CPU} * 3))/g" /etc/mysql/my.cnf

# --
# -- Reinitialize the database
# --
if [[ ! -e /data/mysql/openBMP || $REINIT_DB = 1 ]]; then
    rm -rf /data/mysql/*

    # Reinitialize the database
    mysql_install_db --user=mysql --basedir /usr --explicit_defaults_for_timestamp --datadir=/data/mysql > /dev/null
    service mysql start
    mysqladmin -u root password "${MYSQL_ROOT_PASSWORD}"
    mysqladmin -u root -h $(uname -n) password "${MYSQL_ROOT_PASSWORD}"

    # Create the mysql DB and create user
    mysql -u root --password=${MYSQL_ROOT_PASSWORD} <<DB_CREATE

       create database openBMP;
       create user 'openbmp'@'localhost' identified by "${OPENBMP_DB_PASSWORD}";
       create user 'openbmp'@'%' identified by "${OPENBMP_DB_PASSWORD}";
       grant all on openBMP.* to 'openbmp'@'localhost';
       grant all on openBMP.* to 'openbmp'@'%';

DB_CREATE

    # Import schema
    mysql -u root --password=${MYSQL_ROOT_PASSWORD} openBMP < /usr/local/mysql-openbmp-current.db
    mysql -u root --password=${MYSQL_ROOT_PASSWORD} openBMP < /usr/local/users.db


    # Import whois data
    if [[ -f /config/mysql/whois.db ]]; then
        mysql -u openbmp --password=${OPENBMP_DB_PASSWORD} openBMP < /config/mysql/whois.db
    else
        mysql -u openbmp --password=${OPENBMP_DB_PASSWORD} openBMP < /usr/local/whois.db
    fi

    # Import geo_ip data
    if [[ -f /config/mysql/geo_ip.db ]]; then
        mysql -u openbmp --password=${OPENBMP_DB_PASSWORD} openBMP < /config/mysql/geo_ip.db
    else
        mysql -u openbmp --password=${OPENBMP_DB_PASSWORD} openBMP < /usr/local/geo_ip.db
    fi

fi

# Start services
service rsyslog restart
service ntp start
service mysql restart
cron

found=0
while [[ $found -eq 0 ]]; do
  ps -e -o comm | grep mysqld > /dev/null
  if [[ $? -ne 0 ]]; then
        echo "ERROR: MySQL is not running, check /var/log/syslog for details.  Cannot proceed."
        exit 1
  fi

  netstat -tna | grep :3306 | grep -q LISTEN
  if [[ $? -eq 0 ]]; then
      found=1
  else
      echo "Waiting for MySQL to start..."
      sleep 1
  fi
done

# Update the etc hosts file
if [[ -f /config/hosts ]]; then
    cat /config/hosts >> /etc/hosts
fi

#
# Update kafka fqdn/hostname
#
if [[ ${API_FQDN:-""} = "" ]]; then
    API_FQDN=localhost

elif [[ ${API_FQDN} == "::1" ]]; then
    API_FQDN="localhost"
fi

# If API_FQDN doesn't resolve, then use localhost
ping -c 1 $API_FQDN
if [[ $? -eq 2 ]]; then
    echo "NOTICE: $API_FQDN cannot be resolved or reached.  Using 'localhost' instead."
    API_FQDN=localhost
fi

# Update kafka config
sed -i -r "s/^[#]*advertised.host.name=.*/advertised.host.name=${API_FQDN}/" \
        /usr/local/kafka/config/server.properties
sed -i -r "s/^[#]*advertised.listeners=(.*):\/\/.*/advertised.listeners=\1:\/\/${API_FQDN}:9092/" \
        /usr/local/kafka/config/server.properties



# Start Kafka
rm -rf /tmp/zookeeper
rm -rf /data/mysql/kafka
mkdir /data/mysql/kafka
cd /usr/local/kafka
bin/zookeeper-server-start.sh config/zookeeper.properties > /var/log/zookeeper.log &
sleep 8
JMX_PORT=9999 bin/kafka-server-start.sh config/server.properties > /var/log/kafka.log &

sleep 2

if [[ $(ps -ef | grep kafka  | grep -v grep | wc -l) -ne 2 ]]; then
    echo "FAILED to start Kafka or Zookeeper, cannot proceed"
    echo "FAILED to start Kafka or Zookeeper, cannot proceed" > /var/log/openbmpd.log
    exit 1
fi

cd /tmp

# configure DB_REST - In case the password is different
sed -r -i "s/username=\"[^\"]+\"/username=\"${OPENBMP_DB_USER}\"/" /var/lib/tomcat7/webapps/db_rest/META-INF/context.xml
sed -r -i "s/password=\"[^\"]+\"/password=\"${OPENBMP_DB_PASSWORD}\"/" /var/lib/tomcat7/webapps/db_rest/META-INF/context.xml
sed -r -i "s/jdbc:mysql:[^\"]+/jdbc:mysql:\/\/localhost:3306\/openBMP\//" /var/lib/tomcat7/webapps/db_rest/META-INF/context.xml
sed -r -i "s/jdbc:mariadb:[^\"]+/jdbc:mariadb:\/\/localhost:3306\/openBMP\//" /var/lib/tomcat7/webapps/db_rest/META-INF/context.xml

service tomcat7 restart

# Start the MySQL consumer
java -Xmx256M -Xms256M -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+DisableExplicitGC \
        -jar /usr/local/openbmp-mysql-consumer.jar  -dh localhost  -g ${GROUP_ID} \
        -dn openBMP -du ${OPENBMP_DB_USER} -dp ${OPENBMP_DB_PASSWORD} -b localhost:9092 > /var/log/mysql-consumer1.log &
java -Xmx256M -Xms256M -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+DisableExplicitGC \
        -jar /usr/local/openbmp-mysql-consumer.jar  -dh localhost  -g ${GROUP_ID} \
        -dn openBMP -du ${OPENBMP_DB_USER} -dp ${OPENBMP_DB_PASSWORD} -b localhost:9092 > /var/log/mysql-consumer2.log &
java -Xmx256M -Xms256M -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+DisableExplicitGC \
        -jar /usr/local/openbmp-mysql-consumer.jar  -dh localhost  -g ${GROUP_ID} \
        -dn openBMP -du ${OPENBMP_DB_USER} -dp ${OPENBMP_DB_PASSWORD} -b localhost:9092 > /var/log/mysql-consumer3.log &
java -Xmx256M -Xms256M -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+DisableExplicitGC \
        -jar /usr/local/openbmp-mysql-consumer.jar  -dh localhost  -g ${GROUP_ID} \
        -dn openBMP -du ${OPENBMP_DB_USER} -dp ${OPENBMP_DB_PASSWORD} -b localhost:9092 > /var/log/mysql-consumer4.log &


# Start the rpki validator
if [[ ${DISABLE_RPKI:-""} = "" ]]; then
    if [[ -d /config/rpki/tal ]]; then
        cp -f /config/rpki/tal/* /usr/local/rpki/conf/tal/
    fi

    /usr/local/rpki/rpki-validator.sh start

    # Add RPKI cron entries
     sed  -i '/rpki/d' /etc/crontab
     echo "12 1 * * * root /usr/local/rpki/rpki-validator.sh start > /dev/null" >> /etc/crontab
     echo "1 */2   * * *   root     /usr/local/bin/rpki_validator.py  -u openbmp -p ${OPENBMP_DB_PASSWORD} -s localhost:8080 localhost > /var/log/rpki-validator.log" >> /etc/crontab
else
    # Remove rpki cron entries
    sed  -i '/rpki/d' /etc/crontab
fi

# Start openbmpd and wait - openbmpd runs in foreground
pkill openbmpd

# Update openbmpd config file
OPENBMP_CFG_FILE=/usr/etc/openbmp/openbmpd.conf
sed -r -i "s/admin_id:.*/admin_id: ${ADMIN_ID}/" /usr/etc/openbmp/openbmpd.conf


if [[ -f /config/openbmpd.conf ]]; then
    OPENBMP_CFG_FILE=/config/openbmpd.conf
fi

cd /var/log
/usr/bin/openbmpd -f -l /var/log/openbmpd.log -c ${OPENBMP_CFG_FILE}
